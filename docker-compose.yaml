services:
    # PostgreSQL service for your app
    postgres:
        image: timescale/timescaledb:latest-pg13
        container_name: postgres
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 30s
            timeout: 10s
            retries: 5
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: default
        ports:
            - "5432:5432"
        volumes:
            - /Volumes/SDCARD/postgres_data:/var/lib/postgresql/data

    # Flask application service
    web:
        build: .
        container_name: web
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        restart: always
        environment:
            - POSTGRESQL_DATABASE=postgresql+asyncpg://postgres:postgres@postgres:5432/default
            - POSTMARK_API_KEY=your-postmark-api-key
            - FLASK_SECRET_KEY=your-flask-secret-key
            - FLASK_HOST=http://localhost:8080
            - FLASK_ENV=development
            - FLASK_DEBUG=1
            - FLASK_APP=app.py
            - FLASK_RUN_PORT=8080
        ports:
            - "8080:8080"
        depends_on:
            postgres:
                condition: service_healthy
        working_dir: /app
        volumes:
            - .:/app
        command: >
            sh -c "alembic upgrade head && gunicorn --bind 0.0.0.0:8080 --workers 4 --worker-class uvicorn.workers.UvicornWorker --reload 'app:asgi_app'  --log-level info --access-logfile - --error-logfile -"

    ris:
        build: .
        container_name: ris
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "22"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 10s
        environment:
            - POSTGRESQL_DATABASE=postgresql+asyncpg://postgres:postgres@postgres:5432/default
        depends_on:
            postgres:
                condition: service_healthy
        working_dir: /app
        volumes:
            - .:/app
        entrypoint: >
            /bin/sh -c "/usr/sbin/sshd -D & ./scripts/wait-for-it.sh ris-lite -- mpirun --allow-run-as-root -np 4 --host ris,ris-lite python services/ris.py"

    ris-lite:
        build: .
        container_name: ris-lite
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "22"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 10s
        environment:
            - POSTGRESQL_DATABASE=postgresql+asyncpg://postgres:postgres@postgres:5432/default
        depends_on:
            postgres:
                condition: service_healthy
        working_dir: /app
        volumes:
            - .:/app
        entrypoint: >
            /bin/sh -c "/usr/sbin/sshd -D & ./scripts/wait-for-it.sh ris -- mpirun --allow-run-as-root -np 1 --host ris,ris-lite python services/ris_lite.py"

# Define volumes
volumes:
    pg_data:
